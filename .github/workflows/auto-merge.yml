name: Auto-merge Dependabot PRs

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

permissions:
  contents: write
  pull-requests: write
  checks: read
  statuses: read

jobs:
  auto-merge:
    runs-on: ubuntu-latest
    if: github.actor == 'dependabot[bot]'
    steps:
      - name: Get Dependabot metadata
        id: metadata
        uses: dependabot/fetch-metadata@v2.2.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set update flags
        id: flags
        run: |
          # Determine update types
          IS_PATCH="${{ steps.metadata.outputs.update-type == 'version-update:semver-patch' }}"
          IS_MINOR="${{ steps.metadata.outputs.update-type == 'version-update:semver-minor' }}"
          IS_MAJOR="${{ steps.metadata.outputs.update-type == 'version-update:semver-major' }}"
          IS_SECURITY="${{ contains(steps.metadata.outputs.dependency-names, 'security') || steps.metadata.outputs.alert-state == 'OPEN' }}"

          # Set flags for easy reuse
          echo "is_patch=$IS_PATCH" >> $GITHUB_OUTPUT
          echo "is_minor=$IS_MINOR" >> $GITHUB_OUTPUT
          echo "is_major=$IS_MAJOR" >> $GITHUB_OUTPUT
          echo "is_security=$IS_SECURITY" >> $GITHUB_OUTPUT
          echo "should_auto_merge=$([[ $IS_PATCH == 'true' || $IS_MINOR == 'true' || $IS_SECURITY == 'true' ]] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT

      - name: Wait for CI checks
        if: steps.flags.outputs.should_auto_merge == 'true'
        uses: lewagon/wait-on-check-action@v1.3.4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 15
          running-workflow-name: 'Auto-merge Dependabot PRs'
          allowed-conclusions: success
          verbose: true

      - name: Auto-merge safe updates
        if: steps.flags.outputs.should_auto_merge == 'true'
        run: |
          UPDATE_TYPE="${{ steps.flags.outputs.is_security == 'true' && 'security' || 'version' }}"
          echo "Auto-merging $UPDATE_TYPE update for ${{ steps.metadata.outputs.dependency-names }} from ${{ steps.metadata.outputs.previous-version }} to ${{ steps.metadata.outputs.new-version }}"
          gh pr merge --auto --squash "${{ github.event.pull_request.html_url }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Comment on major updates
        if: steps.flags.outputs.is_major == 'true'
        run: |
          gh pr comment "${{ github.event.pull_request.html_url }}" --body "üö® **Major Version Update Detected** üö®

          This PR contains a **major version update** for ${{ steps.metadata.outputs.dependency-names }} from \`${{ steps.metadata.outputs.previous-version }}\` to \`${{ steps.metadata.outputs.new-version }}\`.

          **‚ö†Ô∏è Manual review required** - major updates may contain breaking changes.

          Please review the following before merging:
          - [ ] Check the changelog/release notes for breaking changes
          - [ ] Verify all tests pass locally
          - [ ] Consider testing in a staging environment
          - [ ] Update any affected documentation

          This PR will **NOT** be auto-merged and requires manual approval."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Add labels
        run: |
          LABELS=""

          # Add update type labels
          if [[ "${{ steps.flags.outputs.is_patch }}" == "true" ]]; then
            LABELS="auto-merge,patch-update"
          elif [[ "${{ steps.flags.outputs.is_minor }}" == "true" ]]; then
            LABELS="auto-merge,minor-update"
          elif [[ "${{ steps.flags.outputs.is_major }}" == "true" ]]; then
            LABELS="manual-review,major-update"
          fi

          # Add security label if applicable
          if [[ "${{ steps.flags.outputs.is_security }}" == "true" ]]; then
            LABELS="${LABELS:+$LABELS,}security-update"
          fi

          # Apply labels
          if [[ -n "$LABELS" ]]; then
            gh pr edit "${{ github.event.pull_request.html_url }}" --add-label "$LABELS"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
