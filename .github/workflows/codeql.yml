name: "CodeQL Security Analysis"

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: '30 2 * * 1'  # Weekly scan on Mondays at 2:30 AM UTC

jobs:
  analyze:
    name: Analyze Code
    runs-on: ubuntu-latest
    timeout-minutes: 360
    permissions:
      # Required for all workflows
      security-events: write
      # Required to fetch internal or private CodeQL packs
      packages: read
      # Only required for workflows in private repositories
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        language: [ 'python', 'javascript' ]
        # CodeQL supports [ 'c-cpp', 'csharp', 'go', 'java-kotlin', 'javascript-typescript', 'python', 'ruby', 'swift' ]
        # Use only 'java-kotlin' to analyze code written in Java, Kotlin or both
        # Use only 'javascript-typescript' to analyze code written in JavaScript, TypeScript or both
        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with "+" to use these queries and those in the config file.

        # For more details on CodeQL's query packs, refer to: https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
        queries: +security-extended,security-and-quality
        config: |
          paths:
            - github-agent/src
            - database-agent/src
          paths-ignore:
            - "**/*test*"
            - "**/*spec*"
            - "**/tests/**"
            - "**/test/**"
            - "**/__tests__/**"
            - "**/*.test.*"
            - "**/*.spec.*"

    # Auto-build attempts to build any compiled languages (C/C++, C#, Go, Java, or Swift).
    # If this step fails, then you should remove it and run the build manually (see below)
    - name: Autobuild
      uses: github/codeql-action/autobuild@v3

    # ℹ️ Command-line programs to run using the OS shell.
    # 📚 See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun

    #   If the Autobuild fails above, remove it and uncomment the following three lines.
    #   modify them (or add more) to build your code if your project, please refer to the EXAMPLE below for guidance.

    # - run: |
    #     echo "Run, Build Application using script"
    #     ./location_of_script_within_repo/buildscript.sh

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

  # Additional security scanning with Bandit for Python
  bandit-scan:
    name: Python Security Scan (Bandit)
    runs-on: ubuntu-latest
    if: ${{ contains(github.event.repository.languages, 'Python') || true }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install Bandit
      run: |
        pip install bandit[toml]

    - name: Run Bandit security scan
      run: |
        bandit -r github-agent/src database-agent/src \
          -f json -o bandit-report.json \
          -ll -i || true  # Don't fail on issues, just report them

    - name: Run Bandit security scan (SARIF)
      run: |
        bandit -r github-agent/src database-agent/src \
          -f sarif -o bandit-results.sarif \
          -ll -i || true
        # Ensure SARIF file exists, create empty one if not
        if [ ! -f bandit-results.sarif ]; then
          cat > bandit-results.sarif << 'EOF'
        {
          "version": "2.1.0",
          "runs": [
            {
              "tool": {
                "driver": {
                  "name": "bandit",
                  "version": "1.0.0"
                }
              },
              "results": []
            }
          ]
        }
        EOF
        fi

    - name: Upload Bandit results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('bandit-results.sarif') != ''
      with:
        sarif_file: bandit-results.sarif

    - name: Upload Bandit results as artifact
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: bandit-security-scan
        path: bandit-report.json

  # Safety check for known vulnerabilities in dependencies
  safety-scan:
    name: Python Dependency Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install Safety
      run: |
        pip install safety

    - name: Run Safety scan on GitHub Agent
      working-directory: github-agent
      run: |
        pip install -r requirements.txt
        safety check --json --output safety-github-agent.json || true
        safety check --output safety-github-agent.txt || true

    - name: Run Safety scan on Database Agent
      working-directory: database-agent
      run: |
        pip install -r requirements.txt
        safety check --json --output safety-database-agent.json || true
        safety check --output safety-database-agent.txt || true

    - name: Upload Safety results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: safety-dependency-scan
        path: |
          github-agent/safety-*.json
          github-agent/safety-*.txt
          database-agent/safety-*.json
          database-agent/safety-*.txt

  # Semgrep security scan
  semgrep-scan:
    name: Semgrep Security Analysis
    runs-on: ubuntu-latest

    container:
      image: semgrep/semgrep

    if: (github.actor != 'dependabot[bot]')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Semgrep
      run: |
        semgrep --config=auto \
          --sarif --output=semgrep-results.sarif \
          --error \
          --exclude="**/tests/**" \
          --exclude="**/test/**" \
          --exclude="**/*test*" \
          github-agent/src database-agent/src || true
        # Ensure SARIF file exists, create empty one if not
        if [ ! -f semgrep-results.sarif ]; then
          cat > semgrep-results.sarif << 'EOF'
        {
          "version": "2.1.0",
          "runs": [
            {
              "tool": {
                "driver": {
                  "name": "semgrep",
                  "version": "1.0.0"
                }
              },
              "results": []
            }
          ]
        }
        EOF
        fi

    - name: Upload Semgrep results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('semgrep-results.sarif') != ''
      with:
        sarif_file: semgrep-results.sarif

  # Summary job to check overall security status
  security-summary:
    name: Security Scan Summary
    runs-on: ubuntu-latest
    needs: [analyze, bandit-scan, safety-scan, semgrep-scan]
    if: always()

    steps:
    - name: Security scan summary
      run: |
        echo "## 🛡️ Security Scan Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Scanner | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|---------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| CodeQL | ${{ needs.analyze.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Bandit (Python Security) | ${{ needs.bandit-scan.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Safety (Dependencies) | ${{ needs.safety-scan.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Semgrep | ${{ needs.semgrep-scan.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📋 **Next Steps:**" >> $GITHUB_STEP_SUMMARY
        echo "- Review any security alerts in the **Security** tab" >> $GITHUB_STEP_SUMMARY
        echo "- Check **Actions** artifacts for detailed reports" >> $GITHUB_STEP_SUMMARY
        echo "- Address any high or critical severity issues" >> $GITHUB_STEP_SUMMARY
